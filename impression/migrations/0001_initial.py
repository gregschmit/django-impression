# Generated by Django 2.0 on 2019-12-29 01:28

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("auth", "0009_alter_user_last_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Distribution",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "distributions",
                    models.ManyToManyField(blank=True, to="impression.Distribution"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EmailAddress",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email_address", models.EmailField(max_length=254, unique=True)),
                (
                    "unsubscribed_from_all",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Email is unsubscribed from everything.",
                    ),
                ),
            ],
            options={"verbose_name_plural": "Email addresses",},
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user_id",
                    models.PositiveIntegerField(
                        blank=True,
                        default=None,
                        help_text="The ID of the user that this message is associated with.",
                        null=True,
                        verbose_name="User ID",
                    ),
                ),
                ("subject", models.CharField(blank=True, max_length=255)),
                (
                    "body",
                    models.TextField(
                        blank=True,
                        help_text="This can be a JSON string to pass arguments to the service, if the service allows.",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("ready_to_send", models.BooleanField(default=False)),
                ("sent", models.DateTimeField(blank=True, null=True)),
                ("last_attempt", models.DateTimeField(blank=True, null=True)),
                (
                    "final_subject",
                    models.TextField(
                        blank=True, editable=False, verbose_name="Subject (final)"
                    ),
                ),
                (
                    "final_body_plaintext",
                    models.TextField(
                        blank=True,
                        editable=False,
                        verbose_name="Body (plaintext, final)",
                    ),
                ),
                (
                    "final_body_html",
                    models.TextField(
                        blank=True, editable=False, verbose_name="Body (HTML, final)"
                    ),
                ),
                (
                    "extra_bcc_email_addresses",
                    models.ManyToManyField(
                        blank=True,
                        related_name="message_extra_bcc_set",
                        to="impression.EmailAddress",
                        verbose_name="Extra BCC",
                    ),
                ),
                (
                    "extra_cc_email_addresses",
                    models.ManyToManyField(
                        blank=True,
                        related_name="message_extra_cc_set",
                        to="impression.EmailAddress",
                        verbose_name="Extra CC",
                    ),
                ),
                (
                    "extra_to_email_addresses",
                    models.ManyToManyField(
                        blank=True,
                        related_name="message_extra_to_set",
                        to="impression.EmailAddress",
                        verbose_name="Extra To",
                    ),
                ),
                (
                    "final_bcc_email_addresses",
                    models.ManyToManyField(
                        blank=True,
                        editable=False,
                        related_name="message_final_bcc_set",
                        to="impression.EmailAddress",
                        verbose_name="BCC (final)",
                    ),
                ),
                (
                    "final_cc_email_addresses",
                    models.ManyToManyField(
                        blank=True,
                        editable=False,
                        related_name="message_final_cc_set",
                        to="impression.EmailAddress",
                        verbose_name="CC (final)",
                    ),
                ),
                (
                    "final_from_email_address",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="message_final_from_set",
                        to="impression.EmailAddress",
                        verbose_name="From (final)",
                    ),
                ),
                (
                    "final_to_email_addresses",
                    models.ManyToManyField(
                        blank=True,
                        editable=False,
                        related_name="message_final_to_set",
                        to="impression.EmailAddress",
                        verbose_name="To (final)",
                    ),
                ),
                (
                    "override_from_email_address",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="message_override_from_set",
                        to="impression.EmailAddress",
                        verbose_name="From (Override)",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RateLimit",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "grouping",
                    models.IntegerField(
                        choices=[(0, "total"), (1, "per user"), (2, "per group")],
                        default=0,
                        help_text="Whether the rate limit should apply to all uses of the service (total), or on a per-group or per-user basis.",
                    ),
                ),
                (
                    "quantity",
                    models.IntegerField(
                        default=1,
                        help_text="The number of messages which can be sent to the service in the given time period (either block or rolling window).",
                    ),
                ),
                (
                    "type",
                    models.IntegerField(
                        choices=[(0, "Block Period"), (1, "Rolling Window")], default=0
                    ),
                ),
                (
                    "block_period",
                    models.IntegerField(
                        choices=[
                            (0, "per hour"),
                            (1, "per day"),
                            (2, "per week"),
                            (3, "per month"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "rolling_window",
                    models.DurationField(
                        default=datetime.timedelta(0, 3600), help_text="[DD] HH:MM:SS"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name must only contain lowercase letters, numbers, and underscores",
                        max_length=255,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[a-z0-9_]+$",
                                code="invalid_name_format",
                                message="Name must only consist of lowercase letters, numbers, and underscores",
                            )
                        ],
                        verbose_name="Name (URL Safe)",
                    ),
                ),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                (
                    "is_unsubscribable",
                    models.BooleanField(
                        default=True,
                        help_text="Disabling this option will send emails to users even if they are unsubscribed to this service. You should only use this for emails which are not periodic. A good example might be a service for order confirmations, where the concept of 'unsubscribing' to those emails is not sensible.",
                    ),
                ),
                (
                    "allow_override_email_from",
                    models.BooleanField(
                        default=False,
                        help_text="Whether users of the service are allowed to override the FROM email address of the service.",
                        verbose_name="Allow override of email FROM header",
                    ),
                ),
                (
                    "allow_extra_target_email_addresses",
                    models.BooleanField(
                        default=False,
                        help_text="Whether we should accept extra email addresses in the TO/CC/BCC headers of the email message, or if we should ignore them and just use the service email configuration.",
                    ),
                ),
                (
                    "allow_json_body",
                    models.BooleanField(
                        default=True,
                        help_text="Try to decode the message body as a JSON and load into template context.",
                        verbose_name="Allow JSON body",
                    ),
                ),
                (
                    "allowed_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Defines the groups who have access to the service.",
                        to="auth.Group",
                    ),
                ),
                (
                    "bcc_distributions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="service_distribution_bcc_set",
                        to="impression.Distribution",
                        verbose_name="BCC (distribution)",
                    ),
                ),
                (
                    "bcc_email_addresses",
                    models.ManyToManyField(
                        blank=True,
                        related_name="service_email_address_bcc_set",
                        to="impression.EmailAddress",
                        verbose_name="BCC",
                    ),
                ),
                (
                    "cc_distributions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="service_distribution_cc_set",
                        to="impression.Distribution",
                        verbose_name="CC (distribution)",
                    ),
                ),
                (
                    "cc_email_addresses",
                    models.ManyToManyField(
                        blank=True,
                        related_name="service_email_address_cc_set",
                        to="impression.EmailAddress",
                        verbose_name="CC",
                    ),
                ),
                (
                    "from_email_address",
                    models.ForeignKey(
                        blank=True,
                        help_text="If blank, the 'DEFAULT_FROM_EMAIL' setting will be used.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="service_email_from_set",
                        to="impression.EmailAddress",
                        verbose_name="From",
                    ),
                ),
                (
                    "rate_limit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="impression.RateLimit",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Template",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=255,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-z _-]+$",
                                code="invalid_name_format",
                                message="Name must only consist of letters, spaces, dashes, and underscores",
                            )
                        ],
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        blank=True, default="{{ subject }}", max_length=255
                    ),
                ),
                (
                    "body_html",
                    models.TextField(
                        blank=True,
                        default='<!DOCTYPE html>\n<html>\n<head>\n  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />\n  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>\n</head>\n<body>\n  <div>{{ body }}</div>\n</body>\n</html>\n',
                        verbose_name="Body (HTML)",
                    ),
                ),
                (
                    "autogenerate_plaintext_body",
                    models.BooleanField(
                        default=True,
                        help_text="If this option is selected, then the plaintext body will be dynamically generated from the HTML body.",
                        verbose_name="Autogenerate plaintext body",
                    ),
                ),
                (
                    "body_plaintext",
                    models.TextField(
                        blank=True,
                        default="{{ body }}",
                        verbose_name="Body (plaintext)",
                    ),
                ),
                (
                    "extends",
                    models.ForeignKey(
                        blank=True,
                        help_text="Use this in place of the '{% extends %}' template tag.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="impression.Template",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="service",
            name="template",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="impression.Template",
            ),
        ),
        migrations.AddField(
            model_name="service",
            name="to_distributions",
            field=models.ManyToManyField(
                blank=True,
                related_name="service_distribution_to_set",
                to="impression.Distribution",
                verbose_name="To (distribution)",
            ),
        ),
        migrations.AddField(
            model_name="service",
            name="to_email_addresses",
            field=models.ManyToManyField(
                blank=True,
                related_name="service_email_address_to_set",
                to="impression.EmailAddress",
                verbose_name="To",
            ),
        ),
        migrations.AddField(
            model_name="message",
            name="service",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="messages",
                to="impression.Service",
            ),
        ),
        migrations.AddField(
            model_name="message",
            name="user_type",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="The type of the user that this message is associated with.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="contenttypes.ContentType",
            ),
        ),
        migrations.AddField(
            model_name="emailaddress",
            name="service_unsubscriptions",
            field=models.ManyToManyField(blank=True, to="impression.Service"),
        ),
        migrations.AddField(
            model_name="distribution",
            name="email_addresses",
            field=models.ManyToManyField(blank=True, to="impression.EmailAddress"),
        ),
    ]
